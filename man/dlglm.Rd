% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dlglm.R
\name{dlglm}
\alias{dlglm}
\title{dlglm: Main wrapper function}
\usage{
dlglm(
  dir_name,
  X,
  Y,
  mask_x,
  mask_y,
  g,
  covars_r_x,
  covars_r_y,
  learn_r,
  data_types_x,
  Ignorable,
  family,
  link,
  normalize,
  early_stop,
  trace,
  draw_miss = T,
  init_r = "default",
  unbalanced = F,
  hyperparams = list(sigma = "elu", bss = c(1000L), lrs = c(0.01, 0.001), impute_bs =
    1000L, arch = "IWAE", niws = 5L, n_imps = 500L, n_epochss = 2002L, n_hidden_layers =
    c(0L, 1L, 2L), n_hidden_layers_y = c(0L), n_hidden_layers_r = c(0L, 1L), h = c(128L,
    64L), h_y = NULL, h_r = c(16L, 32L), dim_zs = c(as.integer(floor(ncol(X)/12)),
    as.integer(floor(ncol(X)/4)), as.integer(floor(ncol(X)/2)), as.integer(floor(3 *
    ncol(X)/4))), L1_weights = 0)
)
}
\arguments{
\item{dir_name}{Directory name where diagnostics and results are saved}

\item{X}{Matrix of covariates (N x P)}

\item{Y}{Response variable (N x 1)}

\item{mask_x}{Mask matrix of X (N x P)}

\item{mask_y}{Mask vector of Y (N x 1)}

\item{g}{Vector with entries "train", "valid", or "test" of length N to denote Training-validation-test split partitioning. If the 'test' set is empty, after model training, final imputation is done on the 'train' set. Otherwise, the 'test' set will be imputed. If `g` is not supplied, an 80-20 train-valid split will be generated, and the `train` set will be imputed..}

\item{covars_r_x}{Vector of 1's and 0's of whether each feature is included as covariates in the missingness model. Need not be specified if `ignorable = T`. Default is using all features as covariates in missingness model. Must be length P (or `ncol(data)`)}

\item{covars_r_y}{1 (default) or 0 of whether the response Y is included as a covariate in the missingness model. Need not be specified if `ignorable = T`. Default is using all features as covariates in missingness model.}

\item{learn_r}{TRUE/FALSE: Whether to learn missingness model via appended NN (TRUE, default), or fit a known logistic regression model (FALSE). If FALSE, `phi0` and `phi` must be specified}

\item{data_types_x}{Vector of data types ('real', 'count', 'pos', 'cat')}

\item{Ignorable}{TRUE/FALSE: Whether missingness is ignorable (MCAR/MAR) or nonignorable (MNAR, default). If missingness is known to be ignorable, "ignorable=T" omits missingness model.}

\item{family}{Family of response Gaussian, Multinomial (generalized Binomial), Poisson (not tested)}

\item{link}{Link function. Typically: Gaussian - identity, Multinomial - mlogit, Poisson - log}

\item{normalize}{Pre-normalization of X and Y to mean 0 std 1 (default: FALSE)}

\item{early_stop}{Early stop criterion based on validation LB to prevent overfitting on training set (default: TRUE)}

\item{trace}{Output interim training trace information (default: FALSE)}

\item{draw_miss}{Draw missing values from posterior of missing variable (default: TRUE). Only change to FALSE for debugging purposes}

\item{init_r}{Initialization scheme of the missingness network ("default" or "alt"). For "alt": missing features are drawn from Unif(-2,2)}

\item{unbalanced}{If unbalanced categorical variable Y (default: FALSE)}

\item{hyperparams}{List of grid of hyperparameter values to search. Relevant hyperparameters: `sigma`: activation function ("relu" or "elu"), `h`: number of nodes per hidden layer, `n_hidden_layers`: #hidden layers (except missingness model Decoder_r), `n_hidden_layers_r`: #hidden layers in missingness model (Decoder_r). If "NULL" then set as the same value as each n_hidden_layers (not tuned). Otherwise, can tune a different grid of values; `bs`: batch size, `lr`: learning rate, `dim_z`: dimensionality of latent z, `niw`: number of importance weights (samples drawn from each latent space), `n_imputations`, `n_epochs`: maximum number of epochs}
}
\value{
res object: NIMIWAE fit containing ... on the test set
}
\description{
dlglm: Main wrapper function
}
\examples{
EXAMPLE HERE

}
\references{
\url{https://github.com/DavidKLim/dlglm}
}
\author{
David K. Lim, \email{deelim@live.unc.edu}
}
